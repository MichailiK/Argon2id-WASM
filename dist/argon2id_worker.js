function F(){if(k===null||k.byteLength===0)k=new Uint8Array(P.memory.buffer);return k}function j(q,B){return q=q>>>0,v.decode(F().subarray(q,q+B))}function x(q){if(z===X.length)X.push(X.length+1);const B=z;return z=X[B],X[B]=q,B}function V(q,B,G){if(G===void 0){const Q=A.encode(q),Z=B(Q.length,1)>>>0;return F().subarray(Z,Z+Q.length).set(Q),C=Q.length,Z}let J=q.length,Y=B(J,1)>>>0;const L=F();let K=0;for(;K<J;K++){const Q=q.charCodeAt(K);if(Q>127)break;L[Y+K]=Q}if(K!==J){if(K!==0)q=q.slice(K);Y=G(Y,J,J=K+q.length*3,1)>>>0;const Q=F().subarray(Y+K,Y+J),Z=h(q,Q);K+=Z.written}return C=K,Y}function D(){if(H===null||H.byteLength===0)H=new Int32Array(P.memory.buffer);return H}function w(q){return X[q]}function f(q){if(q<132)return;X[q]=z,z=q}function _(q){const B=w(q);return f(q),B}function O(q,B,G,J,Y,L){let K,Q;try{const $=P.__wbindgen_add_to_stack_pointer(-16),T=V(q,P.__wbindgen_malloc,P.__wbindgen_realloc),M=C,y=V(B,P.__wbindgen_malloc,P.__wbindgen_realloc),b=C;P.argon2id_hash($,T,M,y,b,G,J,Y,L);var Z=D()[$/4+0],U=D()[$/4+1],S=D()[$/4+2],E=D()[$/4+3],N=Z,R=U;if(E)throw N=0,R=0,_(S);return K=N,Q=R,j(N,R)}finally{P.__wbindgen_add_to_stack_pointer(16),P.__wbindgen_free(K,Q,1)}}async function u(q,B){if(typeof Response==="function"&&q instanceof Response){if(typeof WebAssembly.instantiateStreaming==="function")try{return await WebAssembly.instantiateStreaming(q,B)}catch(J){if(q.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",J);else throw J}const G=await q.arrayBuffer();return await WebAssembly.instantiate(G,B)}else{const G=await WebAssembly.instantiate(q,B);if(G instanceof WebAssembly.Instance)return{instance:G,module:q};else return G}}function g(){const q={};return q.wbg={},q.wbg.__wbindgen_string_new=function(B,G){const J=j(B,G);return x(J)},q}function c(q,B){}function s(q,B){return P=q.exports,W.__wbindgen_wasm_module=B,H=null,k=null,P}async function W(q){if(P!==void 0)return P;if(typeof q==="undefined")q=new URL("argon2id_wasm_bg.wasm",import.meta.url);const B=g();if(typeof q==="string"||typeof Request==="function"&&q instanceof Request||typeof URL==="function"&&q instanceof URL)q=fetch(q);c(B);const{instance:G,module:J}=await u(await q,B);return s(G,J)}var P,v=typeof TextDecoder!=="undefined"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};if(typeof TextDecoder!=="undefined")v.decode();var k=null,X=new Array(128).fill(void 0);X.push(void 0,null,!0,!1);var z=X.length,C=0,A=typeof TextEncoder!=="undefined"?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}},h=typeof A.encodeInto==="function"?function(q,B){return A.encodeInto(q,B)}:function(q,B){const G=A.encode(q);return B.set(G),{read:q.length,written:G.length}},H=null;var I=W;onmessage=(q)=>{I().then(()=>{postMessage({output:O(q.data[0],q.data[1],q.data[2],q.data[3],q.data[4],q.data[5])})}).catch((B)=>{postMessage({error:B})})};
